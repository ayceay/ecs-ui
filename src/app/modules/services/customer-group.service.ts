/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CustomerGroup } from '../models/customer-group';
import { CustomerGroupPaginationModel } from '../models/customer-group-pagination-model';
import { customerGroupsDelete } from '../fn/customer-group/customer-groups-delete';
import { CustomerGroupsDelete$Params } from '../fn/customer-group/customer-groups-delete';
import { customerGroupsFindAllGet$Json } from '../fn/customer-group/customer-groups-find-all-get-json';
import { CustomerGroupsFindAllGet$Json$Params } from '../fn/customer-group/customer-groups-find-all-get-json';
import { customerGroupsFindAllGet$Xml } from '../fn/customer-group/customer-groups-find-all-get-xml';
import { CustomerGroupsFindAllGet$Xml$Params } from '../fn/customer-group/customer-groups-find-all-get-xml';
import { customerGroupsIdDelete } from '../fn/customer-group/customer-groups-id-delete';
import { CustomerGroupsIdDelete$Params } from '../fn/customer-group/customer-groups-id-delete';
import { customerGroupsIdGet$Json } from '../fn/customer-group/customer-groups-id-get-json';
import { CustomerGroupsIdGet$Json$Params } from '../fn/customer-group/customer-groups-id-get-json';
import { customerGroupsIdGet$Xml } from '../fn/customer-group/customer-groups-id-get-xml';
import { CustomerGroupsIdGet$Xml$Params } from '../fn/customer-group/customer-groups-id-get-xml';
import { customerGroupsIdPut } from '../fn/customer-group/customer-groups-id-put';
import { CustomerGroupsIdPut$Params } from '../fn/customer-group/customer-groups-id-put';
import { customerGroupsPost$Json } from '../fn/customer-group/customer-groups-post-json';
import { CustomerGroupsPost$Json$Params } from '../fn/customer-group/customer-groups-post-json';
import { customerGroupsPost$Xml } from '../fn/customer-group/customer-groups-post-xml';
import { CustomerGroupsPost$Xml$Params } from '../fn/customer-group/customer-groups-post-xml';
import { customerGroupsQueryPagePost$Json } from '../fn/customer-group/customer-groups-query-page-post-json';
import { CustomerGroupsQueryPagePost$Json$Params } from '../fn/customer-group/customer-groups-query-page-post-json';
import { customerGroupsQueryPagePost$Xml } from '../fn/customer-group/customer-groups-query-page-post-xml';
import { CustomerGroupsQueryPagePost$Xml$Params } from '../fn/customer-group/customer-groups-query-page-post-xml';

@Injectable({ providedIn: 'root' })
export class CustomerGroupService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `customerGroupsPost()` */
  static readonly CustomerGroupsPostPath = '/customer-groups/';

  /**
   * Create new customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsPost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsPost$Json$Response(params: CustomerGroupsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerGroup>> {
    return customerGroupsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsPost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsPost$Json(params: CustomerGroupsPost$Json$Params, context?: HttpContext): Observable<CustomerGroup> {
    return this.customerGroupsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerGroup>): CustomerGroup => r.body)
    );
  }

  /**
   * Create new customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsPost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsPost$Xml$Response(params: CustomerGroupsPost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerGroup>> {
    return customerGroupsPost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsPost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsPost$Xml(params: CustomerGroupsPost$Xml$Params, context?: HttpContext): Observable<CustomerGroup> {
    return this.customerGroupsPost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerGroup>): CustomerGroup => r.body)
    );
  }

  /** Path part for operation `customerGroupsDelete()` */
  static readonly CustomerGroupsDeletePath = '/customer-groups/';

  /**
   * Delete all customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsDelete$Response(params?: CustomerGroupsDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return customerGroupsDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete all customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsDelete(params?: CustomerGroupsDelete$Params, context?: HttpContext): Observable<void> {
    return this.customerGroupsDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `customerGroupsQueryPagePost()` */
  static readonly CustomerGroupsQueryPagePostPath = '/customer-groups/queryPage';

  /**
   * Get all customer group as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsQueryPagePost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsQueryPagePost$Json$Response(params: CustomerGroupsQueryPagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerGroupPaginationModel>> {
    return customerGroupsQueryPagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all customer group as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsQueryPagePost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsQueryPagePost$Json(params: CustomerGroupsQueryPagePost$Json$Params, context?: HttpContext): Observable<CustomerGroupPaginationModel> {
    return this.customerGroupsQueryPagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerGroupPaginationModel>): CustomerGroupPaginationModel => r.body)
    );
  }

  /**
   * Get all customer group as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsQueryPagePost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsQueryPagePost$Xml$Response(params: CustomerGroupsQueryPagePost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerGroupPaginationModel>> {
    return customerGroupsQueryPagePost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all customer group as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsQueryPagePost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsQueryPagePost$Xml(params: CustomerGroupsQueryPagePost$Xml$Params, context?: HttpContext): Observable<CustomerGroupPaginationModel> {
    return this.customerGroupsQueryPagePost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerGroupPaginationModel>): CustomerGroupPaginationModel => r.body)
    );
  }

  /** Path part for operation `customerGroupsFindAllGet()` */
  static readonly CustomerGroupsFindAllGetPath = '/customer-groups/findAll';

  /**
   * Get all customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsFindAllGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsFindAllGet$Json$Response(params?: CustomerGroupsFindAllGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CustomerGroup>>> {
    return customerGroupsFindAllGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsFindAllGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsFindAllGet$Json(params?: CustomerGroupsFindAllGet$Json$Params, context?: HttpContext): Observable<Array<CustomerGroup>> {
    return this.customerGroupsFindAllGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CustomerGroup>>): Array<CustomerGroup> => r.body)
    );
  }

  /**
   * Get all customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsFindAllGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsFindAllGet$Xml$Response(params?: CustomerGroupsFindAllGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CustomerGroup>>> {
    return customerGroupsFindAllGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsFindAllGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsFindAllGet$Xml(params?: CustomerGroupsFindAllGet$Xml$Params, context?: HttpContext): Observable<Array<CustomerGroup>> {
    return this.customerGroupsFindAllGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CustomerGroup>>): Array<CustomerGroup> => r.body)
    );
  }

  /** Path part for operation `customerGroupsIdGet()` */
  static readonly CustomerGroupsIdGetPath = '/customer-groups/{id}';

  /**
   * Get specific customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsIdGet$Json$Response(params: CustomerGroupsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerGroup>> {
    return customerGroupsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsIdGet$Json(params: CustomerGroupsIdGet$Json$Params, context?: HttpContext): Observable<CustomerGroup> {
    return this.customerGroupsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerGroup>): CustomerGroup => r.body)
    );
  }

  /**
   * Get specific customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsIdGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsIdGet$Xml$Response(params: CustomerGroupsIdGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<CustomerGroup>> {
    return customerGroupsIdGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsIdGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsIdGet$Xml(params: CustomerGroupsIdGet$Xml$Params, context?: HttpContext): Observable<CustomerGroup> {
    return this.customerGroupsIdGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<CustomerGroup>): CustomerGroup => r.body)
    );
  }

  /** Path part for operation `customerGroupsIdPut()` */
  static readonly CustomerGroupsIdPutPath = '/customer-groups/{id}';

  /**
   * Update new customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsIdPut$Response(params: CustomerGroupsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return customerGroupsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update new customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  customerGroupsIdPut(params: CustomerGroupsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.customerGroupsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `customerGroupsIdDelete()` */
  static readonly CustomerGroupsIdDeletePath = '/customer-groups/{id}';

  /**
   * Delete customer group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `customerGroupsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsIdDelete$Response(params: CustomerGroupsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return customerGroupsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete customer group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `customerGroupsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  customerGroupsIdDelete(params: CustomerGroupsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.customerGroupsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
