/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Order } from '../models/order';
import { OrderPaginationModel } from '../models/order-pagination-model';
import { ordersDelete } from '../fn/order/orders-delete';
import { OrdersDelete$Params } from '../fn/order/orders-delete';
import { ordersFindAllGet$Json } from '../fn/order/orders-find-all-get-json';
import { OrdersFindAllGet$Json$Params } from '../fn/order/orders-find-all-get-json';
import { ordersFindAllGet$Xml } from '../fn/order/orders-find-all-get-xml';
import { OrdersFindAllGet$Xml$Params } from '../fn/order/orders-find-all-get-xml';
import { ordersIdDelete } from '../fn/order/orders-id-delete';
import { OrdersIdDelete$Params } from '../fn/order/orders-id-delete';
import { ordersIdGet$Json } from '../fn/order/orders-id-get-json';
import { OrdersIdGet$Json$Params } from '../fn/order/orders-id-get-json';
import { ordersIdGet$Xml } from '../fn/order/orders-id-get-xml';
import { OrdersIdGet$Xml$Params } from '../fn/order/orders-id-get-xml';
import { ordersIdPut } from '../fn/order/orders-id-put';
import { OrdersIdPut$Params } from '../fn/order/orders-id-put';
import { ordersPost$Json } from '../fn/order/orders-post-json';
import { OrdersPost$Json$Params } from '../fn/order/orders-post-json';
import { ordersPost$Xml } from '../fn/order/orders-post-xml';
import { OrdersPost$Xml$Params } from '../fn/order/orders-post-xml';
import { ordersQueryPagePost$Json } from '../fn/order/orders-query-page-post-json';
import { OrdersQueryPagePost$Json$Params } from '../fn/order/orders-query-page-post-json';
import { ordersQueryPagePost$Xml } from '../fn/order/orders-query-page-post-xml';
import { OrdersQueryPagePost$Xml$Params } from '../fn/order/orders-query-page-post-xml';

@Injectable({ providedIn: 'root' })
export class OrderService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `ordersPost()` */
  static readonly OrdersPostPath = '/orders/';

  /**
   * Create new order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersPost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost$Json$Response(params: OrdersPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return ordersPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersPost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost$Json(params: OrdersPost$Json$Params, context?: HttpContext): Observable<Order> {
    return this.ordersPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /**
   * Create new order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersPost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost$Xml$Response(params: OrdersPost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return ordersPost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersPost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersPost$Xml(params: OrdersPost$Xml$Params, context?: HttpContext): Observable<Order> {
    return this.ordersPost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /** Path part for operation `ordersDelete()` */
  static readonly OrdersDeletePath = '/orders/';

  /**
   * Delete all order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersDelete$Response(params?: OrdersDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return ordersDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete all order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersDelete(params?: OrdersDelete$Params, context?: HttpContext): Observable<void> {
    return this.ordersDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `ordersQueryPagePost()` */
  static readonly OrdersQueryPagePostPath = '/orders/queryPage';

  /**
   * Get all order as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersQueryPagePost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersQueryPagePost$Json$Response(params: OrdersQueryPagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderPaginationModel>> {
    return ordersQueryPagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all order as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersQueryPagePost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersQueryPagePost$Json(params: OrdersQueryPagePost$Json$Params, context?: HttpContext): Observable<OrderPaginationModel> {
    return this.ordersQueryPagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderPaginationModel>): OrderPaginationModel => r.body)
    );
  }

  /**
   * Get all order as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersQueryPagePost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersQueryPagePost$Xml$Response(params: OrdersQueryPagePost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderPaginationModel>> {
    return ordersQueryPagePost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all order as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersQueryPagePost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersQueryPagePost$Xml(params: OrdersQueryPagePost$Xml$Params, context?: HttpContext): Observable<OrderPaginationModel> {
    return this.ordersQueryPagePost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderPaginationModel>): OrderPaginationModel => r.body)
    );
  }

  /** Path part for operation `ordersFindAllGet()` */
  static readonly OrdersFindAllGetPath = '/orders/findAll';

  /**
   * Get all order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersFindAllGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersFindAllGet$Json$Response(params?: OrdersFindAllGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Order>>> {
    return ordersFindAllGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersFindAllGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersFindAllGet$Json(params?: OrdersFindAllGet$Json$Params, context?: HttpContext): Observable<Array<Order>> {
    return this.ordersFindAllGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Order>>): Array<Order> => r.body)
    );
  }

  /**
   * Get all order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersFindAllGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersFindAllGet$Xml$Response(params?: OrdersFindAllGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Order>>> {
    return ordersFindAllGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersFindAllGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersFindAllGet$Xml(params?: OrdersFindAllGet$Xml$Params, context?: HttpContext): Observable<Array<Order>> {
    return this.ordersFindAllGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Order>>): Array<Order> => r.body)
    );
  }

  /** Path part for operation `ordersIdGet()` */
  static readonly OrdersIdGetPath = '/orders/{id}';

  /**
   * Get specific order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdGet$Json$Response(params: OrdersIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return ordersIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdGet$Json(params: OrdersIdGet$Json$Params, context?: HttpContext): Observable<Order> {
    return this.ordersIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /**
   * Get specific order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdGet$Xml$Response(params: OrdersIdGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Order>> {
    return ordersIdGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdGet$Xml(params: OrdersIdGet$Xml$Params, context?: HttpContext): Observable<Order> {
    return this.ordersIdGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Order>): Order => r.body)
    );
  }

  /** Path part for operation `ordersIdPut()` */
  static readonly OrdersIdPutPath = '/orders/{id}';

  /**
   * Update new order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersIdPut$Response(params: OrdersIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return ordersIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update new order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ordersIdPut(params: OrdersIdPut$Params, context?: HttpContext): Observable<void> {
    return this.ordersIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `ordersIdDelete()` */
  static readonly OrdersIdDeletePath = '/orders/{id}';

  /**
   * Delete order.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ordersIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdDelete$Response(params: OrdersIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return ordersIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete order.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ordersIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  ordersIdDelete(params: OrdersIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.ordersIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
