/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ProductGroup } from '../models/product-group';
import { ProductGroupPaginationModel } from '../models/product-group-pagination-model';
import { productGroupsDelete } from '../fn/product-group/product-groups-delete';
import { ProductGroupsDelete$Params } from '../fn/product-group/product-groups-delete';
import { productGroupsIdDelete } from '../fn/product-group/product-groups-id-delete';
import { ProductGroupsIdDelete$Params } from '../fn/product-group/product-groups-id-delete';
import { productGroupsIdGet$Json } from '../fn/product-group/product-groups-id-get-json';
import { ProductGroupsIdGet$Json$Params } from '../fn/product-group/product-groups-id-get-json';
import { productGroupsIdGet$Xml } from '../fn/product-group/product-groups-id-get-xml';
import { ProductGroupsIdGet$Xml$Params } from '../fn/product-group/product-groups-id-get-xml';
import { productGroupsIdPut } from '../fn/product-group/product-groups-id-put';
import { ProductGroupsIdPut$Params } from '../fn/product-group/product-groups-id-put';
import { productGroupsPost$Json } from '../fn/product-group/product-groups-post-json';
import { ProductGroupsPost$Json$Params } from '../fn/product-group/product-groups-post-json';
import { productGroupsPost$Xml } from '../fn/product-group/product-groups-post-xml';
import { ProductGroupsPost$Xml$Params } from '../fn/product-group/product-groups-post-xml';
import { productGroupsQueryPagePost$Json } from '../fn/product-group/product-groups-query-page-post-json';
import { ProductGroupsQueryPagePost$Json$Params } from '../fn/product-group/product-groups-query-page-post-json';
import { productGroupsQueryPagePost$Xml } from '../fn/product-group/product-groups-query-page-post-xml';
import { ProductGroupsQueryPagePost$Xml$Params } from '../fn/product-group/product-groups-query-page-post-xml';

@Injectable({ providedIn: 'root' })
export class ProductGroupService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productGroupsPost()` */
  static readonly ProductGroupsPostPath = '/product-groups/';

  /**
   * Create new product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsPost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsPost$Json$Response(params: ProductGroupsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductGroup>> {
    return productGroupsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsPost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsPost$Json(params: ProductGroupsPost$Json$Params, context?: HttpContext): Observable<ProductGroup> {
    return this.productGroupsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductGroup>): ProductGroup => r.body)
    );
  }

  /**
   * Create new product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsPost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsPost$Xml$Response(params: ProductGroupsPost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductGroup>> {
    return productGroupsPost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsPost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsPost$Xml(params: ProductGroupsPost$Xml$Params, context?: HttpContext): Observable<ProductGroup> {
    return this.productGroupsPost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductGroup>): ProductGroup => r.body)
    );
  }

  /** Path part for operation `productGroupsDelete()` */
  static readonly ProductGroupsDeletePath = '/product-groups/';

  /**
   * Delete all product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsDelete$Response(params?: ProductGroupsDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productGroupsDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete all product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsDelete(params?: ProductGroupsDelete$Params, context?: HttpContext): Observable<void> {
    return this.productGroupsDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productGroupsQueryPagePost()` */
  static readonly ProductGroupsQueryPagePostPath = '/product-groups/queryPage';

  /**
   * Get all product group as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsQueryPagePost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsQueryPagePost$Json$Response(params: ProductGroupsQueryPagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductGroupPaginationModel>> {
    return productGroupsQueryPagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all product group as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsQueryPagePost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsQueryPagePost$Json(params: ProductGroupsQueryPagePost$Json$Params, context?: HttpContext): Observable<ProductGroupPaginationModel> {
    return this.productGroupsQueryPagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductGroupPaginationModel>): ProductGroupPaginationModel => r.body)
    );
  }

  /**
   * Get all product group as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsQueryPagePost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsQueryPagePost$Xml$Response(params: ProductGroupsQueryPagePost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductGroupPaginationModel>> {
    return productGroupsQueryPagePost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all product group as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsQueryPagePost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsQueryPagePost$Xml(params: ProductGroupsQueryPagePost$Xml$Params, context?: HttpContext): Observable<ProductGroupPaginationModel> {
    return this.productGroupsQueryPagePost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductGroupPaginationModel>): ProductGroupPaginationModel => r.body)
    );
  }

  /** Path part for operation `productGroupsIdGet()` */
  static readonly ProductGroupsIdGetPath = '/product-groups/{id}';

  /**
   * Get specific product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsIdGet$Json$Response(params: ProductGroupsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductGroup>> {
    return productGroupsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsIdGet$Json(params: ProductGroupsIdGet$Json$Params, context?: HttpContext): Observable<ProductGroup> {
    return this.productGroupsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductGroup>): ProductGroup => r.body)
    );
  }

  /**
   * Get specific product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsIdGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsIdGet$Xml$Response(params: ProductGroupsIdGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductGroup>> {
    return productGroupsIdGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsIdGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsIdGet$Xml(params: ProductGroupsIdGet$Xml$Params, context?: HttpContext): Observable<ProductGroup> {
    return this.productGroupsIdGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductGroup>): ProductGroup => r.body)
    );
  }

  /** Path part for operation `productGroupsIdPut()` */
  static readonly ProductGroupsIdPutPath = '/product-groups/{id}';

  /**
   * Update new product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsIdPut$Response(params: ProductGroupsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productGroupsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update new product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productGroupsIdPut(params: ProductGroupsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.productGroupsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productGroupsIdDelete()` */
  static readonly ProductGroupsIdDeletePath = '/product-groups/{id}';

  /**
   * Delete product group.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productGroupsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsIdDelete$Response(params: ProductGroupsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productGroupsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete product group.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productGroupsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productGroupsIdDelete(params: ProductGroupsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.productGroupsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
