/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Product } from '../models/product';
import { ProductPaginationModel } from '../models/product-pagination-model';
import { productsDelete } from '../fn/product/products-delete';
import { ProductsDelete$Params } from '../fn/product/products-delete';
import { productsIdDelete } from '../fn/product/products-id-delete';
import { ProductsIdDelete$Params } from '../fn/product/products-id-delete';
import { productsIdGet$Json } from '../fn/product/products-id-get-json';
import { ProductsIdGet$Json$Params } from '../fn/product/products-id-get-json';
import { productsIdGet$Xml } from '../fn/product/products-id-get-xml';
import { ProductsIdGet$Xml$Params } from '../fn/product/products-id-get-xml';
import { productsIdPut } from '../fn/product/products-id-put';
import { ProductsIdPut$Params } from '../fn/product/products-id-put';
import { productsPost$Json } from '../fn/product/products-post-json';
import { ProductsPost$Json$Params } from '../fn/product/products-post-json';
import { productsPost$Xml } from '../fn/product/products-post-xml';
import { ProductsPost$Xml$Params } from '../fn/product/products-post-xml';
import { productsQrcodeIdPut } from '../fn/product/products-qrcode-id-put';
import { ProductsQrcodeIdPut$Params } from '../fn/product/products-qrcode-id-put';
import { productsQueryPagePost$Json } from '../fn/product/products-query-page-post-json';
import { ProductsQueryPagePost$Json$Params } from '../fn/product/products-query-page-post-json';
import { productsQueryPagePost$Xml } from '../fn/product/products-query-page-post-xml';
import { ProductsQueryPagePost$Xml$Params } from '../fn/product/products-query-page-post-xml';

@Injectable({ providedIn: 'root' })
export class ProductService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `productsPost()` */
  static readonly ProductsPostPath = '/products/';

  /**
   * Create new product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsPost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsPost$Json$Response(params: ProductsPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Product>> {
    return productsPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsPost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsPost$Json(params: ProductsPost$Json$Params, context?: HttpContext): Observable<Product> {
    return this.productsPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Product>): Product => r.body)
    );
  }

  /**
   * Create new product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsPost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsPost$Xml$Response(params: ProductsPost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Product>> {
    return productsPost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsPost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsPost$Xml(params: ProductsPost$Xml$Params, context?: HttpContext): Observable<Product> {
    return this.productsPost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Product>): Product => r.body)
    );
  }

  /** Path part for operation `productsDelete()` */
  static readonly ProductsDeletePath = '/products/';

  /**
   * Delete all product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsDelete$Response(params?: ProductsDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productsDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete all product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsDelete(params?: ProductsDelete$Params, context?: HttpContext): Observable<void> {
    return this.productsDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productsQueryPagePost()` */
  static readonly ProductsQueryPagePostPath = '/products/queryPage';

  /**
   * Get all product as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsQueryPagePost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsQueryPagePost$Json$Response(params: ProductsQueryPagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductPaginationModel>> {
    return productsQueryPagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all product as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsQueryPagePost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsQueryPagePost$Json(params: ProductsQueryPagePost$Json$Params, context?: HttpContext): Observable<ProductPaginationModel> {
    return this.productsQueryPagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductPaginationModel>): ProductPaginationModel => r.body)
    );
  }

  /**
   * Get all product as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsQueryPagePost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsQueryPagePost$Xml$Response(params: ProductsQueryPagePost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductPaginationModel>> {
    return productsQueryPagePost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all product as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsQueryPagePost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsQueryPagePost$Xml(params: ProductsQueryPagePost$Xml$Params, context?: HttpContext): Observable<ProductPaginationModel> {
    return this.productsQueryPagePost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductPaginationModel>): ProductPaginationModel => r.body)
    );
  }

  /** Path part for operation `productsIdGet()` */
  static readonly ProductsIdGetPath = '/products/{id}';

  /**
   * Get specific product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdGet$Json$Response(params: ProductsIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Product>> {
    return productsIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdGet$Json(params: ProductsIdGet$Json$Params, context?: HttpContext): Observable<Product> {
    return this.productsIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Product>): Product => r.body)
    );
  }

  /**
   * Get specific product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdGet$Xml$Response(params: ProductsIdGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<Product>> {
    return productsIdGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdGet$Xml(params: ProductsIdGet$Xml$Params, context?: HttpContext): Observable<Product> {
    return this.productsIdGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<Product>): Product => r.body)
    );
  }

  /** Path part for operation `productsIdPut()` */
  static readonly ProductsIdPutPath = '/products/{id}';

  /**
   * Update product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsIdPut$Response(params: ProductsIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productsIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  productsIdPut(params: ProductsIdPut$Params, context?: HttpContext): Observable<void> {
    return this.productsIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productsIdDelete()` */
  static readonly ProductsIdDeletePath = '/products/{id}';

  /**
   * Delete product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdDelete$Response(params: ProductsIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productsIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsIdDelete(params: ProductsIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.productsIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `productsQrcodeIdPut()` */
  static readonly ProductsQrcodeIdPutPath = '/products/qrcode/{id}';

  /**
   * Update product.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `productsQrcodeIdPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsQrcodeIdPut$Response(params: ProductsQrcodeIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return productsQrcodeIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update product.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `productsQrcodeIdPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  productsQrcodeIdPut(params: ProductsQrcodeIdPut$Params, context?: HttpContext): Observable<void> {
    return this.productsQrcodeIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
