/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { User } from '../models/user';
import { UserPaginationModel } from '../models/user-pagination-model';
import { usersDelete } from '../fn/user/users-delete';
import { UsersDelete$Params } from '../fn/user/users-delete';
import { usersIdDelete } from '../fn/user/users-id-delete';
import { UsersIdDelete$Params } from '../fn/user/users-id-delete';
import { usersIdGet$Json } from '../fn/user/users-id-get-json';
import { UsersIdGet$Json$Params } from '../fn/user/users-id-get-json';
import { usersIdGet$Xml } from '../fn/user/users-id-get-xml';
import { UsersIdGet$Xml$Params } from '../fn/user/users-id-get-xml';
import { usersIdPut } from '../fn/user/users-id-put';
import { UsersIdPut$Params } from '../fn/user/users-id-put';
import { usersLoginPost } from '../fn/user/users-login-post';
import { UsersLoginPost$Params } from '../fn/user/users-login-post';
import { usersPasswordChangePost$Json } from '../fn/user/users-password-change-post-json';
import { UsersPasswordChangePost$Json$Params } from '../fn/user/users-password-change-post-json';
import { usersPasswordChangePost$Xml } from '../fn/user/users-password-change-post-xml';
import { UsersPasswordChangePost$Xml$Params } from '../fn/user/users-password-change-post-xml';
import { usersPost$Json } from '../fn/user/users-post-json';
import { UsersPost$Json$Params } from '../fn/user/users-post-json';
import { usersPost$Xml } from '../fn/user/users-post-xml';
import { UsersPost$Xml$Params } from '../fn/user/users-post-xml';
import { usersQueryPagePost$Json } from '../fn/user/users-query-page-post-json';
import { UsersQueryPagePost$Json$Params } from '../fn/user/users-query-page-post-json';
import { usersQueryPagePost$Xml } from '../fn/user/users-query-page-post-xml';
import { UsersQueryPagePost$Xml$Params } from '../fn/user/users-query-page-post-xml';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `usersPost()` */
  static readonly UsersPostPath = '/users/';

  /**
   * Create new user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPost$Json$Response(params: UsersPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return usersPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPost$Json(params: UsersPost$Json$Params, context?: HttpContext): Observable<User> {
    return this.usersPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Create new user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPost$Xml$Response(params: UsersPost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return usersPost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPost$Xml(params: UsersPost$Xml$Params, context?: HttpContext): Observable<User> {
    return this.usersPost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `usersDelete()` */
  static readonly UsersDeletePath = '/users/';

  /**
   * Delete all user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersDelete$Response(params?: UsersDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete all user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersDelete(params?: UsersDelete$Params, context?: HttpContext): Observable<void> {
    return this.usersDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersLoginPost()` */
  static readonly UsersLoginPostPath = '/users/login';

  /**
   * Login user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersLoginPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersLoginPost$Response(params: UsersLoginPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersLoginPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Login user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersLoginPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersLoginPost(params: UsersLoginPost$Params, context?: HttpContext): Observable<void> {
    return this.usersLoginPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersPasswordChangePost()` */
  static readonly UsersPasswordChangePostPath = '/users/password-change';

  /**
   * Update user password.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPasswordChangePost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPasswordChangePost$Json$Response(params: UsersPasswordChangePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return usersPasswordChangePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user password.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPasswordChangePost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPasswordChangePost$Json(params: UsersPasswordChangePost$Json$Params, context?: HttpContext): Observable<User> {
    return this.usersPasswordChangePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Update user password.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersPasswordChangePost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPasswordChangePost$Xml$Response(params: UsersPasswordChangePost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return usersPasswordChangePost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Update user password.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersPasswordChangePost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersPasswordChangePost$Xml(params: UsersPasswordChangePost$Xml$Params, context?: HttpContext): Observable<User> {
    return this.usersPasswordChangePost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `usersQueryPagePost()` */
  static readonly UsersQueryPagePostPath = '/users/queryPage';

  /**
   * Get all users as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersQueryPagePost$Json()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersQueryPagePost$Json$Response(params: UsersQueryPagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPaginationModel>> {
    return usersQueryPagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersQueryPagePost$Json$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersQueryPagePost$Json(params: UsersQueryPagePost$Json$Params, context?: HttpContext): Observable<UserPaginationModel> {
    return this.usersQueryPagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPaginationModel>): UserPaginationModel => r.body)
    );
  }

  /**
   * Get all users as paginated.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersQueryPagePost$Xml()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersQueryPagePost$Xml$Response(params: UsersQueryPagePost$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<UserPaginationModel>> {
    return usersQueryPagePost$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users as paginated.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersQueryPagePost$Xml$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersQueryPagePost$Xml(params: UsersQueryPagePost$Xml$Params, context?: HttpContext): Observable<UserPaginationModel> {
    return this.usersQueryPagePost$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserPaginationModel>): UserPaginationModel => r.body)
    );
  }

  /** Path part for operation `usersIdGet()` */
  static readonly UsersIdGetPath = '/users/{id}';

  /**
   * Get specific user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdGet$Json$Response(params: UsersIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return usersIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdGet$Json(params: UsersIdGet$Json$Params, context?: HttpContext): Observable<User> {
    return this.usersIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * Get specific user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdGet$Xml()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdGet$Xml$Response(params: UsersIdGet$Xml$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return usersIdGet$Xml(this.http, this.rootUrl, params, context);
  }

  /**
   * Get specific user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdGet$Xml$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdGet$Xml(params: UsersIdGet$Xml$Params, context?: HttpContext): Observable<User> {
    return this.usersIdGet$Xml$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `usersIdPut()` */
  static readonly UsersIdPutPath = '/users/{id}';

  /**
   * Update new user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPut$Response(params: UsersIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update new user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  usersIdPut(params: UsersIdPut$Params, context?: HttpContext): Observable<void> {
    return this.usersIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `usersIdDelete()` */
  static readonly UsersIdDeletePath = '/users/{id}';

  /**
   * Delete user.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `usersIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdDelete$Response(params: UsersIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return usersIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete user.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `usersIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  usersIdDelete(params: UsersIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.usersIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
